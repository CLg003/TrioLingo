{"ast":null,"code":"var _jsxFileName = \"/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/src/components/LSTwoDropZone.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport Colour from './LSTwoColour';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DropZone = _ref => {\n  _s();\n\n  let {\n    type,\n    name,\n    spanish,\n    colourList\n  } = _ref;\n  // DESTINATION(S) FOR INDIVIDUAL DRAGGED ITEMS\n  const [typeBoard, setTypeBoard] = useState([]);\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    // accept: type\n    accept: type,\n    drop: item => addItemToTypeBoard(item.id),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }));\n\n  const addItemToTypeBoard = id => {\n    // console.log(id);\n    const copyColourList = colourList.filter(colour => id === colour.id);\n    const copyTypeBoard = [...typeBoard];\n    copyTypeBoard.push(copyColourList[0]);\n    setTypeBoard(copyTypeBoard);\n    add; // console.log(typeBoard);\n    // console.log('typeBoard length is: ' + typeBoard.length)\n  }; // DESTINATION FOR ALL DRAGGED ITEMS\n\n\n  const [board, setBoard] = useState([]); // FUNCTION TO ADD CORRECTLY DRAGGED ITEM TO MAIN BOARD \n\n  const addItemToBoard = id => {\n    // console.log(id);\n    const copyColourList = colourList.filter(colour => id === colour.id); // TO ADD TO THE SELECTION OF DRAGGED ITEMS:\n\n    setBoard(board => [...board, copyColourList[0]]);\n  };\n\n  console.log(board); // {board.map((colour) => {\n  //     return <Colour name={colour.english} img={colour.img} id={colour.id} key={colour.id} />\n  // })}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: \"dropzone\",\n    children: typeBoard.length > 0 ? /*#__PURE__*/_jsxDEV(Colour, {\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: name,\n      children: spanish\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DropZone, \"dOljn8cpCrSBjAhFvmTtNUcoXFY=\", false, function () {\n  return [useDrop];\n});\n\n_c = DropZone;\nexport default DropZone;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropZone\");","map":{"version":3,"sources":["/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/src/components/LSTwoDropZone.js"],"names":["useState","useDrop","Colour","DropZone","type","name","spanish","colourList","typeBoard","setTypeBoard","isOver","drop","accept","item","addItemToTypeBoard","id","collect","monitor","copyColourList","filter","colour","copyTypeBoard","push","add","board","setBoard","addItemToBoard","console","log","length"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;;AAEA,MAAMC,QAAQ,GAAG,QAAuC;AAAA;;AAAA,MAAtC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,IAAP;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,GAAsC;AAEpD;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM,CAAC;AAACU,IAAAA;AAAD,GAAD,EAAWC,IAAX,IAAmBV,OAAO,CAAC,OAAO;AACpC;AACAW,IAAAA,MAAM,EAAER,IAF4B;AAGpCO,IAAAA,IAAI,EAAGE,IAAD,IAAUC,kBAAkB,CAACD,IAAI,CAACE,EAAN,CAHE;AAIpCC,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACnBP,MAAAA,MAAM,EAAE,CAAC,CAACO,OAAO,CAACP,MAAR;AADS,KAAd;AAJ2B,GAAP,CAAD,CAAhC;;AASA,QAAMI,kBAAkB,GAAIC,EAAD,IAAQ;AAC/B;AACA,UAAMG,cAAc,GAAGX,UAAU,CAACY,MAAX,CAAmBC,MAAD,IAAYL,EAAE,KAAKK,MAAM,CAACL,EAA5C,CAAvB;AACA,UAAMM,aAAa,GAAG,CAAC,GAAGb,SAAJ,CAAtB;AACAa,IAAAA,aAAa,CAACC,IAAd,CAAmBJ,cAAc,CAAC,CAAD,CAAjC;AACAT,IAAAA,YAAY,CAACY,aAAD,CAAZ;AACAE,IAAAA,GAAG,CAN4B,CAO/B;AACA;AACH,GATD,CAdoD,CAyBpD;;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,EAAD,CAAlC,CA1BoD,CA2BpD;;AACA,QAAM0B,cAAc,GAAIX,EAAD,IAAQ;AAC3B;AACA,UAAMG,cAAc,GAAGX,UAAU,CAACY,MAAX,CAAmBC,MAAD,IAAYL,EAAE,KAAKK,MAAM,CAACL,EAA5C,CAAvB,CAF2B,CAG3B;;AACAU,IAAAA,QAAQ,CAAED,KAAD,IAAW,CAAC,GAAGA,KAAJ,EAAWN,cAAc,CAAC,CAAD,CAAzB,CAAZ,CAAR;AACH,GALD;;AAMAS,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAlCoD,CAoCpD;AACA;AACA;;AAGA,sBACI;AAAK,IAAA,GAAG,EAAEb,IAAV;AAAgB,IAAA,SAAS,EAAC,UAA1B;AAAA,cACMH,SAAS,CAACqB,MAAV,GAAmB,CAAnB,gBACF,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAExB;AAAd;AAAA;AAAA;AAAA;AAAA,YADE,gBAEA;AAAG,MAAA,SAAS,EAAEA,IAAd;AAAA,gBAAqBC;AAArB;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAjDD;;GAAMH,Q;UAKuBF,O;;;KALvBE,Q;AAmDN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport Colour from './LSTwoColour';\n\nconst DropZone = ({type, name, spanish, colourList}) => {\n\n    // DESTINATION(S) FOR INDIVIDUAL DRAGGED ITEMS\n    const [typeBoard, setTypeBoard] = useState([]);\n\n    const [{isOver}, drop] = useDrop(() => ({\n        // accept: type\n        accept: type,\n        drop: (item) => addItemToTypeBoard(item.id),\n        collect: (monitor) => ({\n            isOver: !!monitor.isOver(),\n        }),\n    }));\n\n    const addItemToTypeBoard = (id) => {\n        // console.log(id);\n        const copyColourList = colourList.filter((colour) => id === colour.id);\n        const copyTypeBoard = [...typeBoard];\n        copyTypeBoard.push(copyColourList[0]);\n        setTypeBoard(copyTypeBoard);\n        add\n        // console.log(typeBoard);\n        // console.log('typeBoard length is: ' + typeBoard.length)\n    }\n\n    // DESTINATION FOR ALL DRAGGED ITEMS\n    const [board, setBoard] = useState([]);\n    // FUNCTION TO ADD CORRECTLY DRAGGED ITEM TO MAIN BOARD \n    const addItemToBoard = (id) => {\n        // console.log(id);\n        const copyColourList = colourList.filter((colour) => id === colour.id);\n        // TO ADD TO THE SELECTION OF DRAGGED ITEMS:\n        setBoard((board) => [...board, copyColourList[0]]);\n    }\n    console.log(board);\n\n    // {board.map((colour) => {\n    //     return <Colour name={colour.english} img={colour.img} id={colour.id} key={colour.id} />\n    // })}\n\n\n    return (\n        <div ref={drop} className=\"dropzone\">\n            { typeBoard.length > 0 ? \n            <Colour name={name} />\n            : <p className={name}>{spanish}</p>\n            }\n        </div>\n    );\n}\n\nexport default DropZone;"]},"metadata":{},"sourceType":"module"}