{"ast":null,"code":"import { createStore } from 'redux';\nimport { DragDropManagerImpl } from './classes/DragDropManagerImpl.js';\nimport { DragDropMonitorImpl } from './classes/DragDropMonitorImpl.js';\nimport { HandlerRegistryImpl } from './classes/HandlerRegistryImpl.js';\nimport { reduce } from './reducers/index.js';\nexport function createDragDropManager(backendFactory) {\n  let globalContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let backendOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let debugMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const store = makeStoreInstance(debugMode);\n  const monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store));\n  const manager = new DragDropManagerImpl(store, monitor);\n  const backend = backendFactory(manager, globalContext, backendOptions);\n  manager.receiveBackend(backend);\n  return manager;\n}\n\nfunction makeStoreInstance(debugMode) {\n  // TODO: if we ever make a react-native version of this,\n  // we'll need to consider how to pull off dev-tooling\n  const reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;\n  return createStore(reduce, debugMode && reduxDevTools && reduxDevTools({\n    name: 'dnd-core',\n    instanceId: 'dnd-core'\n  }));\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AAGA,SAASC,MAAT,QAAuB,qBAAvB;AAEA,OAAO,SAASC,qBAAT,CACNC,cADM,EAKY;AAAA,MAHlBC,aAGkB,uEAHOC,SAGP;AAAA,MAFlBC,cAEkB,uEAFQ,EAER;AAAA,MADlBC,SACkB,uEADN,KACM;AAClB,QAAMC,KAAK,GAAGC,iBAAiB,CAACF,SAAD,CAA/B;AACA,QAAMG,OAAO,GAAG,IAAIX,mBAAJ,CAAwBS,KAAxB,EAA+B,IAAIR,mBAAJ,CAAwBQ,KAAxB,CAA/B,CAAhB;AACA,QAAMG,OAAO,GAAG,IAAIb,mBAAJ,CAAwBU,KAAxB,EAA+BE,OAA/B,CAAhB;AACA,QAAME,OAAO,GAAGT,cAAc,CAACQ,OAAD,EAAUP,aAAV,EAAyBE,cAAzB,CAA9B;AACAK,SAAO,CAACE,cAARF,CAAuBC,OAAvBD;AACA,SAAOA,OAAP;AACA;;AAED,SAASF,iBAAT,CAA2BF,SAA3B,EAA6D;AAC5D;AACA;AACA,QAAMO,aAAa,GAClB,OAAOC,MAAP,KAAkB,WAAlB,IACAA,MAAO,CAASC,4BAFjB;AAGA,SAAOnB,WAAW,CACjBI,MADiB,EAEjBM,SAAS,IACRO,aADDP,IAECO,aAAa,CAAC;AACbG,QAAI,EAAE,UADO;AAEbC,cAAU,EAAE;AAFC,GAAD,CAJG,CAAlB;AASA","names":["createStore","DragDropManagerImpl","DragDropMonitorImpl","HandlerRegistryImpl","reduce","createDragDropManager","backendFactory","globalContext","undefined","backendOptions","debugMode","store","makeStoreInstance","monitor","manager","backend","receiveBackend","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","name","instanceId"],"sources":["/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/node_modules/dnd-core/src/createDragDropManager.ts"],"sourcesContent":["import type { Store } from 'redux'\nimport { createStore } from 'redux'\n\nimport { DragDropManagerImpl } from './classes/DragDropManagerImpl.js'\nimport { DragDropMonitorImpl } from './classes/DragDropMonitorImpl.js'\nimport { HandlerRegistryImpl } from './classes/HandlerRegistryImpl.js'\nimport type { BackendFactory, DragDropManager } from './interfaces.js'\nimport type { State } from './reducers/index.js'\nimport { reduce } from './reducers/index.js'\n\nexport function createDragDropManager(\n\tbackendFactory: BackendFactory,\n\tglobalContext: unknown = undefined,\n\tbackendOptions: unknown = {},\n\tdebugMode = false,\n): DragDropManager {\n\tconst store = makeStoreInstance(debugMode)\n\tconst monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store))\n\tconst manager = new DragDropManagerImpl(store, monitor)\n\tconst backend = backendFactory(manager, globalContext, backendOptions)\n\tmanager.receiveBackend(backend)\n\treturn manager\n}\n\nfunction makeStoreInstance(debugMode: boolean): Store<State> {\n\t// TODO: if we ever make a react-native version of this,\n\t// we'll need to consider how to pull off dev-tooling\n\tconst reduxDevTools =\n\t\ttypeof window !== 'undefined' &&\n\t\t(window as any).__REDUX_DEVTOOLS_EXTENSION__\n\treturn createStore(\n\t\treduce,\n\t\tdebugMode &&\n\t\t\treduxDevTools &&\n\t\t\treduxDevTools({\n\t\t\t\tname: 'dnd-core',\n\t\t\t\tinstanceId: 'dnd-core',\n\t\t\t}),\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}