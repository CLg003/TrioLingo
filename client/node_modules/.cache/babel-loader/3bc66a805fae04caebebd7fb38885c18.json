{"ast":null,"code":"import { shallowEqual } from '@react-dnd/shallowequal';\nimport { isRef } from './isRef.js';\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js';\nexport class TargetConnector {\n  get connectTarget() {\n    return this.dropTarget;\n  }\n\n  reconnect() {\n    // if nothing has changed then don't resubscribe\n    const didChange = this.didHandlerIdChange() || this.didDropTargetChange() || this.didOptionsChange();\n\n    if (didChange) {\n      this.disconnectDropTarget();\n    }\n\n    const dropTarget = this.dropTarget;\n\n    if (!this.handlerId) {\n      return;\n    }\n\n    if (!dropTarget) {\n      this.lastConnectedDropTarget = dropTarget;\n      return;\n    }\n\n    if (didChange) {\n      this.lastConnectedHandlerId = this.handlerId;\n      this.lastConnectedDropTarget = dropTarget;\n      this.lastConnectedDropTargetOptions = this.dropTargetOptions;\n      this.unsubscribeDropTarget = this.backend.connectDropTarget(this.handlerId, dropTarget, this.dropTargetOptions);\n    }\n  }\n\n  receiveHandlerId(newHandlerId) {\n    if (newHandlerId === this.handlerId) {\n      return;\n    }\n\n    this.handlerId = newHandlerId;\n    this.reconnect();\n  }\n\n  get dropTargetOptions() {\n    return this.dropTargetOptionsInternal;\n  }\n\n  set dropTargetOptions(options) {\n    this.dropTargetOptionsInternal = options;\n  }\n\n  didHandlerIdChange() {\n    return this.lastConnectedHandlerId !== this.handlerId;\n  }\n\n  didDropTargetChange() {\n    return this.lastConnectedDropTarget !== this.dropTarget;\n  }\n\n  didOptionsChange() {\n    return !shallowEqual(this.lastConnectedDropTargetOptions, this.dropTargetOptions);\n  }\n\n  disconnectDropTarget() {\n    if (this.unsubscribeDropTarget) {\n      this.unsubscribeDropTarget();\n      this.unsubscribeDropTarget = undefined;\n    }\n  }\n\n  get dropTarget() {\n    return this.dropTargetNode || this.dropTargetRef && this.dropTargetRef.current;\n  }\n\n  clearDropTarget() {\n    this.dropTargetRef = null;\n    this.dropTargetNode = null;\n  }\n\n  constructor(backend) {\n    this.hooks = wrapConnectorHooks({\n      dropTarget: (node, options) => {\n        this.clearDropTarget();\n        this.dropTargetOptions = options;\n\n        if (isRef(node)) {\n          this.dropTargetRef = node;\n        } else {\n          this.dropTargetNode = node;\n        }\n\n        this.reconnect();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dropTargetRef = null;\n    this.dropTargetOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDropTarget = null;\n    this.lastConnectedDropTargetOptions = null;\n    this.backend = backend;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,yBAA7B;AAKA,SAASC,KAAT,QAAsB,YAAtB;AAEA,SAASC,kBAAT,QAAmC,yBAAnC;AAEA,OAAO,MAAMC,eAAN,CAAqB;AA8BH,MAAbC,aAAa,GAAQ;AAC/B,WAAO,KAAKC,UAAZ;AACA;;AAEDC,WAAgB,GAAS;AACxB;AACA,UAAMC,SAAS,GACd,KAAKC,kBAAL,MACA,KAAKC,mBAAL,EADA,IAEA,KAAKC,gBAAL,EAHD;;AAKA,QAAIH,SAAJ,EAAe;AACd,WAAKI,oBAAL;AACA;;AAED,UAAMN,UAAU,GAAG,KAAKA,UAAxB;;AACA,QAAI,CAAC,KAAKO,SAAV,EAAqB;AACpB;AACA;;AACD,QAAI,CAACP,UAAL,EAAiB;AAChB,WAAKQ,uBAAL,GAA+BR,UAA/B;AACA;AACA;;AAED,QAAIE,SAAJ,EAAe;AACd,WAAKO,sBAAL,GAA8B,KAAKF,SAAnC;AACA,WAAKC,uBAAL,GAA+BR,UAA/B;AACA,WAAKU,8BAAL,GAAsC,KAAKC,iBAA3C;AAEA,WAAKC,qBAAL,GAA6B,KAAKC,OAAL,CAAaC,iBAAb,CAC5B,KAAKP,SADuB,EAE5BP,UAF4B,EAG5B,KAAKW,iBAHuB,CAA7B;AAKA;AACD;;AAEDI,kBAAuB,CAACC,YAAD,EAAwC;AAC9D,QAAIA,YAAY,KAAK,KAAKT,SAA1B,EAAqC;AACpC;AACA;;AAED,SAAKA,SAAL,GAAiBS,YAAjB;AACA,SAAKf,SAAL;AACA;;AAE2B,MAAjBU,iBAAiB,GAAsB;AACjD,WAAO,KAAKM,yBAAZ;AACA;;AAC2B,MAAjBN,iBAAiB,CAACO,OAAD,EAA6B;AACxD,SAAKD,yBAAL,GAAiCC,OAAjC;AACA;;AAEDf,oBAA0B,GAAY;AACrC,WAAO,KAAKM,sBAAL,KAAgC,KAAKF,SAA5C;AACA;;AAEDH,qBAA2B,GAAY;AACtC,WAAO,KAAKI,uBAAL,KAAiC,KAAKR,UAA7C;AACA;;AAEDK,kBAAwB,GAAY;AACnC,WAAO,CAACV,YAAY,CACnB,KAAKe,8BADc,EAEnB,KAAKC,iBAFc,CAApB;AAIA;;AAEDL,sBAA2B,GAAG;AAC7B,QAAI,KAAKM,qBAAT,EAAgC;AAC/B,WAAKA,qBAAL;AACA,WAAKA,qBAAL,GAA6BO,SAA7B;AACA;AACD;;AAEqB,MAAVnB,UAAU,GAAG;AACxB,WACC,KAAKoB,cAAL,IAAwB,KAAKC,aAAL,IAAsB,KAAKA,aAAL,CAAmBC,OADlE;AAGA;;AAEDC,iBAAuB,GAAG;AACzB,SAAKF,aAAL,GAAqB,IAArB;AACA,SAAKD,cAAL,GAAsB,IAAtB;AACA;;AAxFDI,cAAmBX,OAAnB,EAAqC;AAzBrC,SAAOY,KAAP,GAAe5B,kBAAkB,CAAC;AACjCG,gBAAU,EAAE,CAAC0B,IAAD,EAAYR,OAAZ,KAA2C;AACtD,aAAKK,eAAL;AACA,aAAKZ,iBAAL,GAAyBO,OAAzB;;AACA,YAAItB,KAAK,CAAC8B,IAAD,CAAT,EAAiB;AAChB,eAAKL,aAAL,GAAqBK,IAArB;AACA,SAFD,MAEO;AACN,eAAKN,cAAL,GAAsBM,IAAtB;AACA;;AACD,aAAKzB,SAAL;AACA;AAVgC,KAAD,CAAjC;AAaA,SAAQM,SAAR,GAAuC,IAAvC,CAYqC,CAXrC;;AACA,SAAQc,aAAR,GAA+C,IAA/C;AAEA,SAAQJ,yBAAR,GAA8D,IAA9D;AAGA,SAAQR,sBAAR,GAAoD,IAApD;AACA,SAAQD,uBAAR,GAAuC,IAAvC;AACA,SAAQE,8BAAR,GAAmE,IAAnE;AAIC,SAAKG,OAAL,GAAeA,OAAf;AACA;;AA5B0B","names":["shallowEqual","isRef","wrapConnectorHooks","TargetConnector","connectTarget","dropTarget","reconnect","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","handlerId","lastConnectedDropTarget","lastConnectedHandlerId","lastConnectedDropTargetOptions","dropTargetOptions","unsubscribeDropTarget","backend","connectDropTarget","receiveHandlerId","newHandlerId","dropTargetOptionsInternal","options","undefined","dropTargetNode","dropTargetRef","current","clearDropTarget","constructor","hooks","node"],"sources":["/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/node_modules/react-dnd/src/internals/TargetConnector.ts"],"sourcesContent":["import { shallowEqual } from '@react-dnd/shallowequal'\nimport type { Backend, Identifier, Unsubscribe } from 'dnd-core'\nimport type { RefObject } from 'react'\n\nimport type { DropTargetOptions } from '../types/index.js'\nimport { isRef } from './isRef.js'\nimport type { Connector } from './SourceConnector.js'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\n\nexport class TargetConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdropTarget: (node: any, options: DropTargetOptions) => {\n\t\t\tthis.clearDropTarget()\n\t\t\tthis.dropTargetOptions = options\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dropTargetRef = node\n\t\t\t} else {\n\t\t\t\tthis.dropTargetNode = node\n\t\t\t}\n\t\t\tthis.reconnect()\n\t\t},\n\t})\n\n\tprivate handlerId: Identifier | null = null\n\t// The drop target may either be attached via ref or connect function\n\tprivate dropTargetRef: RefObject<any> | null = null\n\tprivate dropTargetNode: any\n\tprivate dropTargetOptionsInternal: DropTargetOptions | null = null\n\tprivate unsubscribeDropTarget: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDropTarget: any = null\n\tprivate lastConnectedDropTargetOptions: DropTargetOptions | null = null\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dropTarget\n\t}\n\n\tpublic reconnect(): void {\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didDropTargetChange() ||\n\t\t\tthis.didOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDropTarget()\n\t\t}\n\n\t\tconst dropTarget = this.dropTarget\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dropTarget) {\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\tthis.lastConnectedDropTargetOptions = this.dropTargetOptions\n\n\t\t\tthis.unsubscribeDropTarget = this.backend.connectDropTarget(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdropTarget,\n\t\t\t\tthis.dropTargetOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (newHandlerId === this.handlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get dropTargetOptions(): DropTargetOptions {\n\t\treturn this.dropTargetOptionsInternal\n\t}\n\tpublic set dropTargetOptions(options: DropTargetOptions) {\n\t\tthis.dropTargetOptionsInternal = options\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didDropTargetChange(): boolean {\n\t\treturn this.lastConnectedDropTarget !== this.dropTarget\n\t}\n\n\tprivate didOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDropTargetOptions,\n\t\t\tthis.dropTargetOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDropTarget() {\n\t\tif (this.unsubscribeDropTarget) {\n\t\t\tthis.unsubscribeDropTarget()\n\t\t\tthis.unsubscribeDropTarget = undefined\n\t\t}\n\t}\n\n\tprivate get dropTarget() {\n\t\treturn (\n\t\t\tthis.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current)\n\t\t)\n\t}\n\n\tprivate clearDropTarget() {\n\t\tthis.dropTargetRef = null\n\t\tthis.dropTargetNode = null\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}