{"ast":null,"code":"var _jsxFileName = \"/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/src/components/LSTwoDropZone.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport Colour from './LSTwoColour';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DropZone = _ref => {\n  _s();\n\n  let {\n    type,\n    name,\n    spanish,\n    colourList\n  } = _ref;\n  // DESTINATION(S) FOR INDIVIDUAL DRAGGED ITEMS\n  const [typeBoard, setTypeBoard] = useState([]); // DESTINATION FOR ALL DRAGGED ITEMS\n\n  const [board, setBoard] = useState([]);\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: type,\n    drop: item => {\n      addItemToTypeBoard(item.id);\n      addItemToBoard(item.id);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  })); // FUNCTION TO ADD CORRECTLY DRAGGED ITEM TO INVIDUAL ITEM BOARD\n\n  const addItemToTypeBoard = id => {\n    // console.log(id);\n    const copyColourList = colourList.filter(colour => id === colour.id);\n    const copyTypeBoard = [...typeBoard];\n    copyTypeBoard.push(copyColourList[0]);\n    setTypeBoard(copyTypeBoard); // addItemToBoard(id);\n    // console.log(typeBoard);\n    // console.log('typeBoard length is: ' + typeBoard.length)\n  }; // FUNCTION TO ADD CORRECTLY DRAGGED ITEM TO MAIN BOARD \n\n\n  const addItemToBoard = id => {\n    // console.log(id);\n    const copyColourList = colourList.filter(colour => id === colour.id);\n    const copyBoard = [...board];\n    copyBoard.push(copyColourList[0]);\n    setBoard(copyBoard);\n    console.log(board);\n    console.log('board length is: ' + board.length);\n  }; // {board.map((colour) => {\n  //     return <Colour name={colour.english} img={colour.img} id={colour.id} key={colour.id} />\n  // })}\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: \"dropzone\",\n    children: typeBoard.length > 0 ? /*#__PURE__*/_jsxDEV(Colour, {\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: name,\n      children: spanish\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DropZone, \"WVaNoClZLJKReu4i/lfYGXNzOrM=\", false, function () {\n  return [useDrop];\n});\n\n_c = DropZone;\nexport default DropZone;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropZone\");","map":{"version":3,"sources":["/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/src/components/LSTwoDropZone.js"],"names":["useState","useDrop","Colour","DropZone","type","name","spanish","colourList","typeBoard","setTypeBoard","board","setBoard","isOver","drop","accept","item","addItemToTypeBoard","id","addItemToBoard","collect","monitor","copyColourList","filter","colour","copyTypeBoard","push","copyBoard","console","log","length"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;;AAEA,MAAMC,QAAQ,GAAG,QAAuC;AAAA;;AAAA,MAAtC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,IAAP;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,GAAsC;AAEpD;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C,CAHoD,CAIpD;;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAAC;AAACY,IAAAA;AAAD,GAAD,EAAWC,IAAX,IAAmBZ,OAAO,CAAC,OAAO;AACpCa,IAAAA,MAAM,EAAEV,IAD4B;AAEpCS,IAAAA,IAAI,EAAGE,IAAD,IAAU;AACZC,MAAAA,kBAAkB,CAACD,IAAI,CAACE,EAAN,CAAlB;AACAC,MAAAA,cAAc,CAACH,IAAI,CAACE,EAAN,CAAd;AACH,KALmC;AAMpCE,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACnBR,MAAAA,MAAM,EAAE,CAAC,CAACQ,OAAO,CAACR,MAAR;AADS,KAAd;AAN2B,GAAP,CAAD,CAAhC,CAPoD,CAiBpD;;AACA,QAAMI,kBAAkB,GAAIC,EAAD,IAAQ;AAC/B;AACA,UAAMI,cAAc,GAAGd,UAAU,CAACe,MAAX,CAAmBC,MAAD,IAAYN,EAAE,KAAKM,MAAM,CAACN,EAA5C,CAAvB;AACA,UAAMO,aAAa,GAAG,CAAC,GAAGhB,SAAJ,CAAtB;AACAgB,IAAAA,aAAa,CAACC,IAAd,CAAmBJ,cAAc,CAAC,CAAD,CAAjC;AACAZ,IAAAA,YAAY,CAACe,aAAD,CAAZ,CAL+B,CAM/B;AACA;AACA;AACH,GATD,CAlBoD,CA8BpD;;;AACA,QAAMN,cAAc,GAAID,EAAD,IAAQ;AAC3B;AACA,UAAMI,cAAc,GAAGd,UAAU,CAACe,MAAX,CAAmBC,MAAD,IAAYN,EAAE,KAAKM,MAAM,CAACN,EAA5C,CAAvB;AACA,UAAMS,SAAS,GAAG,CAAC,GAAGhB,KAAJ,CAAlB;AACAgB,IAAAA,SAAS,CAACD,IAAV,CAAeJ,cAAc,CAAC,CAAD,CAA7B;AACAV,IAAAA,QAAQ,CAACe,SAAD,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBlB,KAAK,CAACmB,MAAxC;AACH,GARD,CA/BoD,CA0CpD;AACA;AACA;;;AAGA,sBACI;AAAK,IAAA,GAAG,EAAEhB,IAAV;AAAgB,IAAA,SAAS,EAAC,UAA1B;AAAA,cACML,SAAS,CAACqB,MAAV,GAAmB,CAAnB,gBACF,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAExB;AAAd;AAAA;AAAA;AAAA;AAAA,YADE,gBAEA;AAAG,MAAA,SAAS,EAAEA,IAAd;AAAA,gBAAqBC;AAArB;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAvDD;;GAAMH,Q;UAOuBF,O;;;KAPvBE,Q;AAyDN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport Colour from './LSTwoColour';\n\nconst DropZone = ({type, name, spanish, colourList}) => {\n\n    // DESTINATION(S) FOR INDIVIDUAL DRAGGED ITEMS\n    const [typeBoard, setTypeBoard] = useState([]);\n    // DESTINATION FOR ALL DRAGGED ITEMS\n    const [board, setBoard] = useState([]);\n\n    const [{isOver}, drop] = useDrop(() => ({\n        accept: type,\n        drop: (item) => {\n            addItemToTypeBoard(item.id);\n            addItemToBoard(item.id)\n        },\n        collect: (monitor) => ({\n            isOver: !!monitor.isOver(),\n        }),\n    }));\n    // FUNCTION TO ADD CORRECTLY DRAGGED ITEM TO INVIDUAL ITEM BOARD\n    const addItemToTypeBoard = (id) => {\n        // console.log(id);\n        const copyColourList = colourList.filter((colour) => id === colour.id);\n        const copyTypeBoard = [...typeBoard];\n        copyTypeBoard.push(copyColourList[0]);\n        setTypeBoard(copyTypeBoard);\n        // addItemToBoard(id);\n        // console.log(typeBoard);\n        // console.log('typeBoard length is: ' + typeBoard.length)\n    }\n\n  \n    // FUNCTION TO ADD CORRECTLY DRAGGED ITEM TO MAIN BOARD \n    const addItemToBoard = (id) => {\n        // console.log(id);\n        const copyColourList = colourList.filter((colour) => id === colour.id);\n        const copyBoard = [...board];\n        copyBoard.push(copyColourList[0]);\n        setBoard(copyBoard);\n        console.log(board);\n        console.log('board length is: ' + board.length)\n    }\n    \n\n    // {board.map((colour) => {\n    //     return <Colour name={colour.english} img={colour.img} id={colour.id} key={colour.id} />\n    // })}\n\n\n    return (\n        <div ref={drop} className=\"dropzone\">\n            { typeBoard.length > 0 ? \n            <Colour name={name} />\n            : <p className={name}>{spanish}</p>\n            }\n        </div>\n    );\n}\n\nexport default DropZone;"]},"metadata":{},"sourceType":"module"}