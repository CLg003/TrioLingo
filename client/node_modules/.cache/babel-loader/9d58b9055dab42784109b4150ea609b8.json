{"ast":null,"code":"import { asap } from '@react-dnd/asap';\nimport { invariant } from '@react-dnd/invariant';\nimport { addSource, addTarget, removeSource, removeTarget } from '../actions/registry.js';\nimport { validateSourceContract, validateTargetContract, validateType } from '../contracts.js';\nimport { HandlerRole } from '../interfaces.js';\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js';\n\nfunction getNextHandlerId(role) {\n  const id = getNextUniqueId().toString();\n\n  switch (role) {\n    case HandlerRole.SOURCE:\n      return `S${id}`;\n\n    case HandlerRole.TARGET:\n      return `T${id}`;\n\n    default:\n      throw new Error(`Unknown Handler Role: ${role}`);\n  }\n}\n\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return HandlerRole.SOURCE;\n\n    case 'T':\n      return HandlerRole.TARGET;\n\n    default:\n      throw new Error(`Cannot parse handler ID: ${handlerId}`);\n  }\n}\n\nfunction mapContainsValue(map, searchValue) {\n  const entries = map.entries();\n  let isDone = false;\n\n  do {\n    const {\n      done,\n      value: [, value]\n    } = entries.next();\n\n    if (value === searchValue) {\n      return true;\n    }\n\n    isDone = !!done;\n  } while (!isDone);\n\n  return false;\n}\n\nexport class HandlerRegistryImpl {\n  addSource(type, source) {\n    validateType(type);\n    validateSourceContract(source);\n    const sourceId = this.addHandler(HandlerRole.SOURCE, type, source);\n    this.store.dispatch(addSource(sourceId));\n    return sourceId;\n  }\n\n  addTarget(type, target) {\n    validateType(type, true);\n    validateTargetContract(target);\n    const targetId = this.addHandler(HandlerRole.TARGET, type, target);\n    this.store.dispatch(addTarget(targetId));\n    return targetId;\n  }\n\n  containsHandler(handler) {\n    return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n  }\n\n  getSource(sourceId) {\n    let includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    const isPinned = includePinned && sourceId === this.pinnedSourceId;\n    const source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n    return source;\n  }\n\n  getTarget(targetId) {\n    invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.dropTargets.get(targetId);\n  }\n\n  getSourceType(sourceId) {\n    invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n    return this.types.get(sourceId);\n  }\n\n  getTargetType(targetId) {\n    invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n    return this.types.get(targetId);\n  }\n\n  isSourceId(handlerId) {\n    const role = parseRoleFromHandlerId(handlerId);\n    return role === HandlerRole.SOURCE;\n  }\n\n  isTargetId(handlerId) {\n    const role = parseRoleFromHandlerId(handlerId);\n    return role === HandlerRole.TARGET;\n  }\n\n  removeSource(sourceId) {\n    invariant(this.getSource(sourceId), 'Expected an existing source.');\n    this.store.dispatch(removeSource(sourceId));\n    asap(() => {\n      this.dragSources.delete(sourceId);\n      this.types.delete(sourceId);\n    });\n  }\n\n  removeTarget(targetId) {\n    invariant(this.getTarget(targetId), 'Expected an existing target.');\n    this.store.dispatch(removeTarget(targetId));\n    this.dropTargets.delete(targetId);\n    this.types.delete(targetId);\n  }\n\n  pinSource(sourceId) {\n    const source = this.getSource(sourceId);\n    invariant(source, 'Expected an existing source.');\n    this.pinnedSourceId = sourceId;\n    this.pinnedSource = source;\n  }\n\n  unpinSource() {\n    invariant(this.pinnedSource, 'No source is pinned at the time.');\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n  }\n\n  addHandler(role, type, handler) {\n    const id = getNextHandlerId(role);\n    this.types.set(id, type);\n\n    if (role === HandlerRole.SOURCE) {\n      this.dragSources.set(id, handler);\n    } else if (role === HandlerRole.TARGET) {\n      this.dropTargets.set(id, handler);\n    }\n\n    return id;\n  }\n\n  constructor(store) {\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n    this.store = store;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["asap","invariant","addSource","addTarget","removeSource","removeTarget","validateSourceContract","validateTargetContract","validateType","HandlerRole","getNextUniqueId","getNextHandlerId","role","id","toString","SOURCE","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","done","value","next","HandlerRegistryImpl","type","source","sourceId","addHandler","store","dispatch","target","targetId","containsHandler","handler","dragSources","dropTargets","getSource","includePinned","isSourceId","isPinned","pinnedSourceId","pinnedSource","get","getTarget","isTargetId","getSourceType","types","getTargetType","delete","pinSource","unpinSource","set","constructor","Map"],"sources":["/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/node_modules/dnd-core/src/classes/HandlerRegistryImpl.ts"],"sourcesContent":["import { asap } from '@react-dnd/asap'\nimport { invariant } from '@react-dnd/invariant'\nimport type { Store } from 'redux'\n\nimport {\n\taddSource,\n\taddTarget,\n\tremoveSource,\n\tremoveTarget,\n} from '../actions/registry.js'\nimport {\n\tvalidateSourceContract,\n\tvalidateTargetContract,\n\tvalidateType,\n} from '../contracts.js'\nimport type {\n\tDragSource,\n\tDropTarget,\n\tHandlerRegistry,\n\tIdentifier,\n\tSourceType,\n\tTargetType,\n} from '../interfaces.js'\nimport { HandlerRole } from '../interfaces.js'\nimport type { State } from '../reducers/index.js'\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js'\n\nfunction getNextHandlerId(role: HandlerRole): string {\n\tconst id = getNextUniqueId().toString()\n\tswitch (role) {\n\t\tcase HandlerRole.SOURCE:\n\t\t\treturn `S${id}`\n\t\tcase HandlerRole.TARGET:\n\t\t\treturn `T${id}`\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown Handler Role: ${role}`)\n\t}\n}\n\nfunction parseRoleFromHandlerId(handlerId: string) {\n\tswitch (handlerId[0]) {\n\t\tcase 'S':\n\t\t\treturn HandlerRole.SOURCE\n\t\tcase 'T':\n\t\t\treturn HandlerRole.TARGET\n\t\tdefault:\n\t\t\tthrow new Error(`Cannot parse handler ID: ${handlerId}`)\n\t}\n}\n\nfunction mapContainsValue<T>(map: Map<string, T>, searchValue: T) {\n\tconst entries = map.entries()\n\tlet isDone = false\n\tdo {\n\t\tconst {\n\t\t\tdone,\n\t\t\tvalue: [, value],\n\t\t} = entries.next()\n\t\tif (value === searchValue) {\n\t\t\treturn true\n\t\t}\n\t\tisDone = !!done\n\t} while (!isDone)\n\treturn false\n}\n\nexport class HandlerRegistryImpl implements HandlerRegistry {\n\tprivate types: Map<string, SourceType | TargetType> = new Map()\n\tprivate dragSources: Map<string, DragSource> = new Map()\n\tprivate dropTargets: Map<string, DropTarget> = new Map()\n\tprivate pinnedSourceId: string | null = null\n\tprivate pinnedSource: any = null\n\tprivate store: Store<State>\n\n\tpublic constructor(store: Store<State>) {\n\t\tthis.store = store\n\t}\n\n\tpublic addSource(type: SourceType, source: DragSource): string {\n\t\tvalidateType(type)\n\t\tvalidateSourceContract(source)\n\n\t\tconst sourceId = this.addHandler(HandlerRole.SOURCE, type, source)\n\t\tthis.store.dispatch(addSource(sourceId))\n\t\treturn sourceId\n\t}\n\n\tpublic addTarget(type: TargetType, target: DropTarget): string {\n\t\tvalidateType(type, true)\n\t\tvalidateTargetContract(target)\n\n\t\tconst targetId = this.addHandler(HandlerRole.TARGET, type, target)\n\t\tthis.store.dispatch(addTarget(targetId))\n\t\treturn targetId\n\t}\n\n\tpublic containsHandler(handler: DragSource | DropTarget): boolean {\n\t\treturn (\n\t\t\tmapContainsValue(this.dragSources, handler) ||\n\t\t\tmapContainsValue(this.dropTargets, handler)\n\t\t)\n\t}\n\n\tpublic getSource(sourceId: string, includePinned = false): DragSource {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\tconst isPinned = includePinned && sourceId === this.pinnedSourceId\n\t\tconst source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId)\n\t\treturn source\n\t}\n\n\tpublic getTarget(targetId: string): DropTarget {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.dropTargets.get(targetId) as DropTarget\n\t}\n\n\tpublic getSourceType(sourceId: string): Identifier {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\treturn this.types.get(sourceId) as Identifier\n\t}\n\n\tpublic getTargetType(targetId: string): Identifier | Identifier[] {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.types.get(targetId) as Identifier | Identifier[]\n\t}\n\n\tpublic isSourceId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.SOURCE\n\t}\n\n\tpublic isTargetId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.TARGET\n\t}\n\n\tpublic removeSource(sourceId: string): void {\n\t\tinvariant(this.getSource(sourceId), 'Expected an existing source.')\n\t\tthis.store.dispatch(removeSource(sourceId))\n\t\tasap(() => {\n\t\t\tthis.dragSources.delete(sourceId)\n\t\t\tthis.types.delete(sourceId)\n\t\t})\n\t}\n\n\tpublic removeTarget(targetId: string): void {\n\t\tinvariant(this.getTarget(targetId), 'Expected an existing target.')\n\t\tthis.store.dispatch(removeTarget(targetId))\n\t\tthis.dropTargets.delete(targetId)\n\t\tthis.types.delete(targetId)\n\t}\n\n\tpublic pinSource(sourceId: string): void {\n\t\tconst source = this.getSource(sourceId)\n\t\tinvariant(source, 'Expected an existing source.')\n\n\t\tthis.pinnedSourceId = sourceId\n\t\tthis.pinnedSource = source\n\t}\n\n\tpublic unpinSource(): void {\n\t\tinvariant(this.pinnedSource, 'No source is pinned at the time.')\n\n\t\tthis.pinnedSourceId = null\n\t\tthis.pinnedSource = null\n\t}\n\n\tprivate addHandler(\n\t\trole: HandlerRole,\n\t\ttype: SourceType | TargetType,\n\t\thandler: DragSource | DropTarget,\n\t): string {\n\t\tconst id = getNextHandlerId(role)\n\t\tthis.types.set(id, type)\n\t\tif (role === HandlerRole.SOURCE) {\n\t\t\tthis.dragSources.set(id, handler as DragSource)\n\t\t} else if (role === HandlerRole.TARGET) {\n\t\t\tthis.dropTargets.set(id, handler as DropTarget)\n\t\t}\n\t\treturn id\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}