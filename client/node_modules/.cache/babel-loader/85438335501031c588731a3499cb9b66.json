{"ast":null,"code":"var _jsxFileName = \"/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/src/components/LSTwoDragDrop.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport Colour from './LSTwoColour';\nimport '../LSTwoDragDrop.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DragDrop = _ref => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    words\n  } = _ref;\n  // NEED AN ARRAY OF THE COLOURS FOR DnD\n  const colourList = [words.black, words.blue, words.brown, words.green, words.orange, words.purple, words.red, words.white, words.yellow]; // ADDING COLOUR PROPERTY\n\n  colourList[0]['english'] = \"black\";\n  colourList[1]['english'] = \"blue\";\n  colourList[2]['english'] = \"brown\";\n  colourList[3]['english'] = \"green\";\n  colourList[4]['english'] = \"orange\";\n  colourList[5]['english'] = \"purple\";\n  colourList[6]['english'] = \"red\";\n  colourList[7]['english'] = \"white\";\n  colourList[8]['english'] = \"yellow\"; // ADDING ID PROPERTY (WON'T BE NEEDED ONCE DB UP AND RUNNING)\n\n  colourList[0]['id'] = 0;\n  colourList[1]['id'] = 1;\n  colourList[2]['id'] = 2;\n  colourList[3]['id'] = 3;\n  colourList[4]['id'] = 4;\n  colourList[5]['id'] = 5;\n  colourList[6]['id'] = 6;\n  colourList[7]['id'] = 7;\n  colourList[8]['id'] = 8; // ADDING IMG PROPERTY (WON'T BE NEEDED ONCE IMAGES UPLOADED)\n\n  colourList[0]['img'] = '../images/colours/black.png';\n  colourList[1]['img'] = '../images/colours/blue.png';\n  colourList[2]['img'] = '../images/colours/brown.png';\n  colourList[3]['img'] = '../images/colours/green.png';\n  colourList[5]['img'] = '../images/colours/orange.png';\n  colourList[4]['img'] = '../images/colours/purple.png';\n  colourList[6]['img'] = '../images/colours/red.png';\n  colourList[7]['img'] = '../images/colours/white.png';\n  colourList[8]['img'] = '../images/colours/yellow.png'; // console.log(colourList);\n  // KANBAN BOARD TUTORIAL CODE:\n\n  const channels = [\"backlog\", \"new\", \"wip\", \"review\", \"done\"];\n\n  const Kanban = () => {\n    _s();\n\n    const [tasks, setTaskStatus] = useState(tasksList);\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: \" Kanban Board \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DndProvider, {\n        backend: HTML5Backend,\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          style: classes.board,\n          children: channels.map(channel => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n            status: channel,\n            changeTaskStatus: changeTaskStatus,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: classes.column,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: classes.columnHead,\n                children: labelsMap[channel]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: tasks.filter(item => item.status === channel).map(item => /*#__PURE__*/_jsxDEV(KanbanItem, {\n                  id: item._id,\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    style: classes.item,\n                    children: item.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 31\n                  }, this)\n                }, item._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 29\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }, this)\n          }, channel, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this);\n  }; // DESTINATION FOR DRAGGED ITEMS\n\n\n  _s(Kanban, \"/qGwvz0Vb490S0fRmQX8iUlTp00=\");\n\n  const [board, setBoard] = useState([]); // MONITORING WHETHER THE ITEM IS BEING DROPPED\n\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: \"black\",\n    drop: item => addItemToBoard(item.id),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }));\n\n  const addItemToBoard = id => {\n    // console.log(id);\n    const copyColourList = colourList.filter(colour => id === colour.id); // TO ADD TO THE SELECTION OF DRAGGED ITEMS:\n\n    setBoard(board => [...board, copyColourList[0]]); // TO REPLACE CURRENT ITEM WITH DRAGGED ITEM:\n    // setBoard([copyColourList[0]]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dnd-colours\",\n      children: colourList.map(colour => {\n        return /*#__PURE__*/_jsxDEV(Colour, {\n          name: colour.english,\n          img: colour.img,\n          id: colour.id\n        }, colour.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dnd-board\",\n      ref: drop,\n      children: board.map(colour => {\n        return /*#__PURE__*/_jsxDEV(Colour, {\n          name: colour.english,\n          img: colour.img,\n          id: colour.id\n        }, colour.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(DragDrop, \"D3GWHorUUkOj7fZWY1d2IVoQd2k=\", false, function () {\n  return [useDrop];\n});\n\n_c = DragDrop;\nexport default DragDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragDrop\");","map":{"version":3,"sources":["/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/src/components/LSTwoDragDrop.js"],"names":["useState","useDrop","Colour","DragDrop","words","colourList","black","blue","brown","green","orange","purple","red","white","yellow","channels","Kanban","tasks","setTaskStatus","tasksList","HTML5Backend","classes","board","map","channel","changeTaskStatus","column","columnHead","labelsMap","filter","item","status","_id","title","setBoard","isOver","drop","accept","addItemToBoard","id","collect","monitor","copyColourList","colour","english","img"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport Colour from './LSTwoColour';\nimport '../LSTwoDragDrop.css';\n\n\n\nconst DragDrop = ({words}) => {\n    // NEED AN ARRAY OF THE COLOURS FOR DnD\n    const colourList = [words.black, words.blue, words.brown, words.green, words.orange, words.purple, words.red, words.white, words.yellow];\n    // ADDING COLOUR PROPERTY\n    colourList[0]['english'] = \"black\";\n    colourList[1]['english'] = \"blue\";\n    colourList[2]['english'] = \"brown\";\n    colourList[3]['english'] = \"green\";\n    colourList[4]['english'] = \"orange\";\n    colourList[5]['english'] = \"purple\";\n    colourList[6]['english'] = \"red\";\n    colourList[7]['english'] = \"white\";\n    colourList[8]['english'] = \"yellow\";\n    // ADDING ID PROPERTY (WON'T BE NEEDED ONCE DB UP AND RUNNING)\n    colourList[0]['id'] = 0;\n    colourList[1]['id'] = 1;\n    colourList[2]['id'] = 2;\n    colourList[3]['id'] = 3;\n    colourList[4]['id'] = 4;\n    colourList[5]['id'] = 5;\n    colourList[6]['id'] = 6;\n    colourList[7]['id'] = 7;\n    colourList[8]['id'] = 8;\n    // ADDING IMG PROPERTY (WON'T BE NEEDED ONCE IMAGES UPLOADED)\n    colourList[0]['img'] = '../images/colours/black.png';\n    colourList[1]['img'] = '../images/colours/blue.png';\n    colourList[2]['img'] = '../images/colours/brown.png';\n    colourList[3]['img'] = '../images/colours/green.png';\n    colourList[5]['img'] = '../images/colours/orange.png';\n    colourList[4]['img'] = '../images/colours/purple.png';\n    colourList[6]['img'] = '../images/colours/red.png';\n    colourList[7]['img'] = '../images/colours/white.png';\n    colourList[8]['img'] = '../images/colours/yellow.png';\n\n    // console.log(colourList);\n\n    // KANBAN BOARD TUTORIAL CODE:\n    const channels = [\"backlog\", \"new\", \"wip\", \"review\", \"done\"];\n    \n    const Kanban = () => {\n        const [tasks, setTaskStatus] = useState(tasksList);\n      \n      \n        return (\n          <main>\n            <header> Kanban Board </header>\n            <DndProvider backend={HTML5Backend}>\n              <section style={classes.board}>\n                {channels.map(channel => (\n                  <KanbanColumn\n                    key={channel}\n                    status={channel}\n                    changeTaskStatus={changeTaskStatus}\n                  >\n                    <div style={classes.column}>\n                      <div style={classes.columnHead}>{labelsMap[channel]}</div>\n                      <div>\n                        {tasks\n                          .filter(item => item.status === channel)\n                          .map(item => (\n                            <KanbanItem key={item._id} id={item._id}>\n                              <div style={classes.item}>{item.title}</div>\n                            </KanbanItem>\n                          ))}\n                      </div>\n                    </div>\n                  </KanbanColumn>\n                ))}\n              </section>\n            </DndProvider>\n          </main>\n        );\n      };\n    \n    // DESTINATION FOR DRAGGED ITEMS\n    const [board, setBoard] = useState([]);\n\n    // MONITORING WHETHER THE ITEM IS BEING DROPPED\n    \n    const [{isOver}, drop] = useDrop(() => ({\n        accept: \"black\",\n        drop: (item) => addItemToBoard(item.id),\n        collect: (monitor) => ({\n            isOver: !!monitor.isOver(),\n        }),\n    }));\n\n    const addItemToBoard = (id) => {\n        // console.log(id);\n        const copyColourList = colourList.filter((colour) => id === colour.id);\n        // TO ADD TO THE SELECTION OF DRAGGED ITEMS:\n        setBoard((board) => [...board, copyColourList[0]]);\n\n        // TO REPLACE CURRENT ITEM WITH DRAGGED ITEM:\n        // setBoard([copyColourList[0]]);\n    };\n\n    return (\n        <>\n        <div className=\"dnd-colours\">\n            {colourList.map((colour) => {\n                return <Colour name={colour.english} img={colour.img} id={colour.id} key={colour.id} />\n            })}\n        </div>\n        <div className=\"dnd-board\" ref={drop}>\n            {board.map((colour) => {\n                return <Colour name={colour.english} img={colour.img} id={colour.id} key={colour.id} />\n            })}\n        </div>\n        </>\n    );\n    \n}\n\nexport default DragDrop;"]},"metadata":{},"sourceType":"module"}