{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createDragDropManager } from 'dnd-core';\nimport { memo, useEffect } from 'react';\nimport { DndContext } from './DndContext.js';\nlet refCount = 0;\nconst INSTANCE_SYM = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__');\nvar DndProvider = /*#__PURE__*/memo(function DndProvider(_param) {\n  var {\n    children\n  } = _param,\n      props = _objectWithoutProperties(_param, [\"children\"]);\n\n  const [manager, isGlobalInstance] = getDndContextValue(props) // memoized from props\n  ;\n  /**\n  * If the global context was used to store the DND context\n  * then where theres no more references to it we should\n  * clean it up to avoid memory leaks\n  */\n\n  useEffect(() => {\n    if (isGlobalInstance) {\n      const context = getGlobalContext();\n      ++refCount;\n      return () => {\n        if (--refCount === 0) {\n          context[INSTANCE_SYM] = null;\n        }\n      };\n    }\n\n    return;\n  }, []);\n  return /*#__PURE__*/_jsx(DndContext.Provider, {\n    value: manager,\n    children: children\n  });\n});\n/**\n * A React component that provides the React-DnD context\n */\n\nexport { DndProvider };\n\nfunction getDndContextValue(props) {\n  if ('manager' in props) {\n    const manager = {\n      dragDropManager: props.manager\n    };\n    return [manager, false];\n  }\n\n  const manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);\n  const isGlobalInstance = !props.context;\n  return [manager, isGlobalInstance];\n}\n\nfunction createSingletonDndContext(backend) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getGlobalContext();\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  let debugMode = arguments.length > 3 ? arguments[3] : undefined;\n  const ctx = context;\n\n  if (!ctx[INSTANCE_SYM]) {\n    ctx[INSTANCE_SYM] = {\n      dragDropManager: createDragDropManager(backend, context, options, debugMode)\n    };\n  }\n\n  return ctx[INSTANCE_SYM];\n}\n\nfunction getGlobalContext() {\n  return typeof global !== 'undefined' ? global : window;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,qBAAT,QAAsC,UAAtC;AAEA,SAASC,IAAT,EAAeC,SAAf,QAAgC,OAAhC;AAEA,SAASC,UAAT,QAA2B,iBAA3B;AAeA,IAAIC,QAAQ,GAAG,CAAf;AACA,MAAMC,YAAY,GAAGC,MAAM,CAACC,GAAPD,CAAW,gCAAXA,CAArB;IAKaE,WAAW,gBAA2CP,IAAI,CACtE,SAASO,WAAT,CAAqBC,MAArB,EAA6C;MAAxB;AAAEC;AAAF;MAAeC,KAAK,4BAApBF,MAAoB,EAAE,CAApBC,UAAoB,CAAF;;AACxC,QAAM,CAACE,OAAD,EAAUC,gBAAV,IAA8BC,kBAAkB,CAACH,KAAD,CAAtD,CAA8D;AAA9D;AACA;;;;;;AAKAT,WAAS,CAAC,MAAM;AACf,QAAIW,gBAAJ,EAAsB;AACrB,YAAME,OAAO,GAAGC,gBAAgB,EAAhC;AACA,QAAEZ,QAAF;AAEA,aAAO,MAAM;AACZ,YAAI,EAAEA,QAAF,KAAe,CAAnB,EAAsB;AACrBW,iBAAO,CAACV,YAAD,CAAPU,GAAwB,IAAxBA;AACA;AACD,OAJD;AAKA;;AACD;AACA,GAZQ,EAYN,EAZM,CAATb;AAcA,sBAAOe,KAACd,UAAU,CAACe,QAAZ,EAAoB;AAACC,SAAK,EAAEP,OAAR;cAAkBF;AAAlB,GAApB,CAAP;AACA,CAvBqE;AAHvE;;;;AAGA;;AA0BA,SAASI,kBAAT,CAA4BH,KAA5B,EAAuE;AACtE,MAAI,aAAaA,KAAjB,EAAwB;AACvB,UAAMC,OAAO,GAAG;AAAEQ,qBAAe,EAAET,KAAK,CAACC;AAAzB,KAAhB;AACA,WAAO,CAACA,OAAD,EAAU,KAAV,CAAP;AACA;;AAED,QAAMA,OAAO,GAAGS,yBAAyB,CACxCV,KAAK,CAACW,OADkC,EAExCX,KAAK,CAACI,OAFkC,EAGxCJ,KAAK,CAACY,OAHkC,EAIxCZ,KAAK,CAACa,SAJkC,CAAzC;AAMA,QAAMX,gBAAgB,GAAG,CAACF,KAAK,CAACI,OAAhC;AAEA,SAAO,CAACH,OAAD,EAAUC,gBAAV,CAAP;AACA;;AAED,SAASQ,yBAAT,CACCC,OADD,EAKE;AAAA,MAHDP,OAGC,uEAHyBC,gBAAgB,EAGzC;AAAA,MAFDO,OAEC;AAAA,MADDC,SACC;AACD,QAAMC,GAAG,GAAGV,OAAZ;;AACA,MAAI,CAACU,GAAG,CAACpB,YAAD,CAAR,EAAwB;AACvBoB,OAAG,CAACpB,YAAD,CAAHoB,GAAoB;AACnBL,qBAAe,EAAEpB,qBAAqB,CACrCsB,OADqC,EAErCP,OAFqC,EAGrCQ,OAHqC,EAIrCC,SAJqC;AADnB,KAApBC;AAQA;;AACD,SAAOA,GAAG,CAACpB,YAAD,CAAV;AACA;;AAGD,SAASW,gBAAT,GAA4B;AAC3B,SAAO,OAAOU,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAA0CC,MAAjD;AACA","names":["createDragDropManager","memo","useEffect","DndContext","refCount","INSTANCE_SYM","Symbol","for","DndProvider","_param","children","props","manager","isGlobalInstance","getDndContextValue","context","getGlobalContext","_jsx","Provider","value","dragDropManager","createSingletonDndContext","backend","options","debugMode","ctx","global","window"],"sources":["/Users/clairelaing/codeclan_work/week_10/triolingo_group_project/client/node_modules/react-dnd/src/core/DndProvider.tsx"],"sourcesContent":["import type { BackendFactory, DragDropManager } from 'dnd-core'\nimport { createDragDropManager } from 'dnd-core'\nimport type { FC, ReactNode } from 'react'\nimport { memo, useEffect } from 'react'\n\nimport { DndContext } from './DndContext.js'\n\nexport type DndProviderProps<BackendContext, BackendOptions> =\n\t| {\n\t\t\tchildren?: ReactNode\n\t\t\tmanager: DragDropManager\n\t  }\n\t| {\n\t\t\tbackend: BackendFactory\n\t\t\tchildren?: ReactNode\n\t\t\tcontext?: BackendContext\n\t\t\toptions?: BackendOptions\n\t\t\tdebugMode?: boolean\n\t  }\n\nlet refCount = 0\nconst INSTANCE_SYM = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__')\n\n/**\n * A React component that provides the React-DnD context\n */\nexport const DndProvider: FC<DndProviderProps<unknown, unknown>> = memo(\n\tfunction DndProvider({ children, ...props }) {\n\t\tconst [manager, isGlobalInstance] = getDndContextValue(props) // memoized from props\n\t\t/**\n\t\t * If the global context was used to store the DND context\n\t\t * then where theres no more references to it we should\n\t\t * clean it up to avoid memory leaks\n\t\t */\n\t\tuseEffect(() => {\n\t\t\tif (isGlobalInstance) {\n\t\t\t\tconst context = getGlobalContext()\n\t\t\t\t++refCount\n\n\t\t\t\treturn () => {\n\t\t\t\t\tif (--refCount === 0) {\n\t\t\t\t\t\tcontext[INSTANCE_SYM] = null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn\n\t\t}, [])\n\n\t\treturn <DndContext.Provider value={manager}>{children}</DndContext.Provider>\n\t},\n)\n\nfunction getDndContextValue(props: DndProviderProps<unknown, unknown>) {\n\tif ('manager' in props) {\n\t\tconst manager = { dragDropManager: props.manager }\n\t\treturn [manager, false]\n\t}\n\n\tconst manager = createSingletonDndContext(\n\t\tprops.backend,\n\t\tprops.context,\n\t\tprops.options,\n\t\tprops.debugMode,\n\t)\n\tconst isGlobalInstance = !props.context\n\n\treturn [manager, isGlobalInstance]\n}\n\nfunction createSingletonDndContext<BackendContext, BackendOptions>(\n\tbackend: BackendFactory,\n\tcontext: BackendContext = getGlobalContext(),\n\toptions: BackendOptions,\n\tdebugMode?: boolean,\n) {\n\tconst ctx = context as any\n\tif (!ctx[INSTANCE_SYM]) {\n\t\tctx[INSTANCE_SYM] = {\n\t\t\tdragDropManager: createDragDropManager(\n\t\t\t\tbackend,\n\t\t\t\tcontext,\n\t\t\t\toptions,\n\t\t\t\tdebugMode,\n\t\t\t),\n\t\t}\n\t}\n\treturn ctx[INSTANCE_SYM]\n}\n\ndeclare const global: any\nfunction getGlobalContext() {\n\treturn typeof global !== 'undefined' ? global : (window as any)\n}\n"]},"metadata":{},"sourceType":"module"}