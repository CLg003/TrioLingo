{"ast":null,"code":"var _jsxFileName = \"/Users/elicodes/codeclan_hworks/week_10/wk10_javascript_group_project_triolingo_210422/client/src/containers/Game.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport SingleCard from \"../components/SingleCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": \"/img/manzanaa.png\",\n  matched: false\n}, {\n  \"src\": \"/img/bus.png\",\n  matched: false\n}, {\n  \"src\": \"/img/pez.png\",\n  matched: false\n}, {\n  \"src\": \"/img/rojo.png\",\n  matched: false\n}, {\n  \"src\": \"/img/tres.png\",\n  matched: false\n}, {\n  \"src\": \"/img/perro.png\",\n  matched: false\n}, {\n  \"src\": \"/img/manzana.png\",\n  matched: false\n}, {\n  \"src\": \"/img/autobusp.png\",\n  matched: false\n}, {\n  \"src\": \"/img/pezp.png\",\n  matched: false\n}, {\n  \"src\": \"/img/rojop.png\",\n  matched: false\n}, {\n  \"src\": \"/img/tresp.png\",\n  matched: false\n}, {\n  \"src\": \"/img/perrop.png\",\n  matched: false\n}]; // const imagesWords = [\n//     {\"src\": \"/img/manzanap.png\"},\n//     {\"src\": \"/img/autobusp.png\"},\n//     {\"src\": \"/img/pezp.png\"},\n//     {\"src\": \"/img/rojop.png\"},\n//     {\"src\": \"/img/tresp.png\"},\n//     {\"src\": \"/img/perrop.png\"}\n// ]\n\nfunction Game() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0); //a state for each card choice the user makes\n\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages] // the sort method will fire a function for each pair of item of\n    // item on the array and inside function if we return a number less \n    // than 0 the odd of those 2 items will stay the same. if we return \n    // greater than 0 the odd will be mixed up / Math.random will give us a random number. the end result will be a shuffled array with a random id\n    .sort(() => Math.random() - 0.5).map(card => ({ ...card,\n      id: Math.random()\n    }));\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // console.log(cards, turns)\n  //handle a choice\n\n\n  const handleChoice = card => {\n    // console.log(card)\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }; //compare 2 selected cards\n\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        // console.log(\"Those cards match\")\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        // console.log(\"Those card do not match\")\n        //this settimeout will delay th\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  console.log(cards); //reset choices and increase turn\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Test your Memoria \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \" New Game \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card === choiceOne || card.matched\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"Jh8IS0p+Ny2F8+HO0jU4cFbPayA=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/elicodes/codeclan_hworks/week_10/wk10_javascript_group_project_triolingo_210422/client/src/containers/Game.js"],"names":["useEffect","useState","SingleCard","cardImages","matched","Game","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurn","setTimeout","console","log","prevTurns"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport SingleCard from \"../components/SingleCard\";\n\n\nconst cardImages = [\n    {\"src\": \"/img/manzanaa.png\" , matched: false},\n    {\"src\": \"/img/bus.png\" , matched: false},\n    {\"src\": \"/img/pez.png\" , matched: false},\n    {\"src\": \"/img/rojo.png\" , matched: false},\n    {\"src\": \"/img/tres.png\" , matched: false},\n    {\"src\": \"/img/perro.png\" , matched: false},\n    {\"src\": \"/img/manzana.png\" , matched: false},\n    {\"src\": \"/img/autobusp.png\" , matched: false},\n    {\"src\": \"/img/pezp.png\" , matched: false},\n    {\"src\": \"/img/rojop.png\" , matched: false},\n    {\"src\": \"/img/tresp.png\" , matched: false},\n    {\"src\": \"/img/perrop.png\" , matched: false}\n]\n\n// const imagesWords = [\n//     {\"src\": \"/img/manzanap.png\"},\n//     {\"src\": \"/img/autobusp.png\"},\n//     {\"src\": \"/img/pezp.png\"},\n//     {\"src\": \"/img/rojop.png\"},\n//     {\"src\": \"/img/tresp.png\"},\n//     {\"src\": \"/img/perrop.png\"}\n// ]\n\nfunction Game() {\n\n    const [cards, setCards] = useState([])\n    const [turns, setTurns] = useState(0)\n\n//a state for each card choice the user makes\n    const [choiceOne , setChoiceOne] = useState(null)\n    const [choiceTwo , setChoiceTwo] = useState(null)\n\n\n    const shuffleCards = () => {\n        const shuffledCards = [...cardImages , ...cardImages]\n        // the sort method will fire a function for each pair of item of\n        // item on the array and inside function if we return a number less \n        // than 0 the odd of those 2 items will stay the same. if we return \n        // greater than 0 the odd will be mixed up / Math.random will give us a random number. the end result will be a shuffled array with a random id\n        .sort(() => Math.random() - 0.5)\n        .map((card) => ({...card , id: Math.random()}))\n\n        setCards(shuffledCards)\n        setTurns(0)\n    }\n\n    // console.log(cards, turns)\n\n    //handle a choice\n    const handleChoice = (card) => {\n        // console.log(card)\n        choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n    }\n\n    //compare 2 selected cards\n    useEffect(() => {\n        if (choiceOne && choiceTwo) {\n\n            if (choiceOne.src === choiceTwo.src) {\n                // console.log(\"Those cards match\")\n                setCards(prevCards => {\n                    return prevCards.map(card => {\n                        if (card.src === choiceOne.src) {\n                            return {...card, matched :true}\n                        }else {\n                            return card\n                        }\n                    })\n                })\n                resetTurn()\n            }else{\n                // console.log(\"Those card do not match\")\n                //this settimeout will delay th\n                setTimeout(() => resetTurn(), 1000)\n            }\n        }\n\n    },[choiceOne,choiceTwo])\n    console.log(cards)\n\n    //reset choices and increase turn\n    const resetTurn = () => {\n        setChoiceOne(null)\n        setChoiceTwo(null)\n        setTurns(prevTurns => prevTurns + 1)\n    }\n\n    return (\n        <div className=\"Game\">\n            <h1> Test your Memoria </h1>\n            <button onClick = {shuffleCards}> New Game </button>\n\n            <div className=\"card-grid\">\n                {cards.map(card => (\n                    <SingleCard \n                    key = {card.id} \n                    card={card} \n                    handleChoice={handleChoice} \n                    flipped={card === choiceOne ||\n                    card === choiceOne || card.matched} />\n                ))}\n\n            </div>\n        </div>\n\n    );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}